---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import MobileMenu from "../../components/MobileMenu.astro";
import Footer from "../../components/Footer.astro";
import FormattedDate from "../../components/FormattedDate.astro";
import { getCollection } from "astro:content";

type LanguageCollection = "zh-hant";

// 获取当前语言
const url = new URL(Astro.request.url);
const lang = url.pathname.split("/")[1] as LanguageCollection;

// 动态加载翻译文件
import translationsZhHant from "../../locales/zh-hant/translation.json";
import MainBlogHead from "../../components/MainBlogHead.astro";
const translations = {
  "zh-hant": translationsZhHant,
}[lang];

const t = (key: string) => {
  const keys = key.split(".");
  return (
    keys.reduce(
      (acc, k) => acc && (acc as { [key: string]: any })[k],
      translations
    ) || key
  );
};
interface PaginateFunction {
  (items: any[], options: { pageSize: number }): any;
}

export async function getStaticPaths({ paginate }: { paginate: PaginateFunction }) {
  const posts = (await getCollection("zh-hant")).sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  );
  return paginate(posts, { pageSize: 5 });
}

// 所有分页数据都在 "page" 参数中传递
const { page }: any = Astro.props;

// 生成页码链接的函数
function generatePageLinks(currentPage: number, lastPage: number): (number | string)[] {
  const pages: any = [];
  if (lastPage <= 1) return pages;

  if (currentPage > 2) {
    pages.push(1);
    if (currentPage > 3) {
      pages.push('...');
    }
  }

  if (currentPage > 1) {
    pages.push(currentPage - 1);
  }

  pages.push(currentPage);

  if (currentPage < lastPage) {
    pages.push(currentPage + 1);
  }

  if (currentPage < lastPage - 1) {
    if (currentPage < lastPage - 2) {
      pages.push('...');
    }
    pages.push(lastPage);
  }

  return pages;
}
---
<!doctype html>
<html lang={`${lang}`}>
  <head>
    <BaseHead
      title={t("site.title")}
      description={t("site.description")}
      image="/images/header/blog-header.webp"
    />
    <MainBlogHead />
    <style>
      .pagination-show {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 0.5rem;
        margin-top: 20px;
      }
      .pagination-show a {
        font-size: larger;
        padding: 0.5rem;
        text-decoration: none;
        display: flex;
        align-items: center;
      }
      .pagination-show a.bold {
        font-weight: bold;
      }
    </style>
  </head>
  <body>
    <MobileMenu />
    <Header />
    <div class="main-blog">
      <main>
        <section>
          <ul>
            {
              page.data.map((post: any) => (
                <li>
                  <a href={`/${lang}/${post.slug}/`}>
                    <img
                      width={720}
                      height={360}
                      src={post.data.heroImage}
                      alt=""
                    />
                    <h4 class="title">{post.data.title}</h4>
                    <p class="date">
                      <div>
                        <FormattedDate date={post.data.pubDate} />
                      </div>
                    </p>
                  </a>
                </li>
              ))
            }
          </ul>
        </section>
        <div class="pagination-show">
          {
            page.url.prev ? (
              <a href={page.url.prev}>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="25"
                  height="25"
                  viewBox="0 0 24 24"
                >
                  <g
                    fill="none"
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="1.5"
                  >
                    <>
                      <path d="M13 8.5L9.5 12l3.5 3.5" />
                      <path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2S2 6.477 2 12s4.477 10 10 10" />
                    </>
                  </g>
                </svg>
              </a>
            ) : null
          }
          {
            generatePageLinks(page.currentPage, page.lastPage).map(
              (pageIndex: number | string, i: number) => {
                return (
                  <a
                    href={pageIndex !== "..." ? `/${lang}/${pageIndex}` : "#"}
                    class={pageIndex === page.currentPage ? "bold" : ""}
                    style={{
                      pointerEvents: pageIndex === "..." ? "none" : "auto",
                    }}
                  >
                    {pageIndex}
                  </a>
                );
              }
            )
          }
          {
            page.url.next ? (
              <a href={page.url.next}>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="25"
                  height="25"
                  viewBox="0 0 24 24"
                >
                  <g
                    fill="none"
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="1.5"
                  >
                    <>
                      <path d="m11 8.5l3.5 3.5l-3.5 3.5" />
                      <path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2S2 6.477 2 12s4.477 10 10 10" />
                    </>
                  </g>
                </svg>
              </a>
            ) : null
          }
        </div>
      </main>
    </div>
    <Footer />
  </body>
</html>